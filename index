<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>رابط هوش مصنوعی Gemini</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/jit"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.0.0/css/all.min.css">
    <style>
        @font-face {
            font-family: 'Vazir';
            src: url('https://cdn.jsdelivr.net/gh/rastikerdar/vazir-font@v30.1.0/dist/Vazir-Regular.woff2') format('woff2');
            font-weight: normal;
            font-style: normal;
        }
        
        * {
            font-family: 'Vazir', sans-serif;
        }
        
        body {
            background-color: #f0f4f8;
        }
        
        .chat-container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .chat-history {
            height: auto;
            min-height: 400px;
            overflow-y: auto;
            padding: 20px;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 15px;
            border-radius: 15px;
            max-width: 80%;
            position: relative;
        }
        
        .user-message {
            background-color: #e2f1fe;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }
        
        .ai-message {
            background-color: #f0f0f0;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }
        
        .message-input {
            border-radius: 20px;
            padding: 15px;
            transition: all 0.3s ease;
        }
        
        .message-input:focus {
            box-shadow: 0 0 0 2px #4299e1;
        }
        
        .send-button {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .send-button:hover {
            transform: scale(1.05);
        }
        
        .typing-indicator {
            display: none;
            padding: 12px 15px;
            background-color: #f0f0f0;
            border-radius: 15px;
            margin-bottom: 15px;
            max-width: 80px;
            margin-right: auto;
        }
        
        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #606060;
            margin-left: 4px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) {
            animation-delay: 0s;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
            }
            30% {
                transform: translateY(-5px);
            }
        }
        
        .header-image {
            width: 40px;
            height: 40px;
            margin-left: 10px;
        }
        
        code {
            direction: ltr;
            display: block;
            background-color: #282c34;
            color: #abb2bf;
            padding: 12px;
            border-radius: 6px;
            overflow-x: auto;
            font-family: monospace;
            margin: 10px 0;
            text-align: left;
        }
        
        pre {
            margin: 0;
            white-space: pre-wrap;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        /* Dark mode toggle */
        .theme-switch {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 100;
        }
        
        /* Dark mode styles */
        .dark-mode {
            background-color: #1a1a2e;
            color: #f0f0f0;
        }
        
        .dark-mode .chat-container {
            background-color: #16213e;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
        
        .dark-mode .user-message {
            background-color: #4d4d7d;
            color: white;
        }
        
        .dark-mode .ai-message {
            background-color: #2c2c54;
            color: white;
        }
        
        .dark-mode .message-input {
            background-color: #16213e;
            color: white;
            border-color: #4d4d7d;
        }
        
        .dark-mode .typing-indicator {
            background-color: #2c2c54;
        }
        
        .dark-mode .typing-dot {
            background-color: #a0a0a0;
        }
        
        /* For PDF export optimization */
        @media print {
            body {
                width: 100%;
                margin: 0;
                padding: 0;
                background-color: white;
            }
            
            .chat-container {
                box-shadow: none;
                width: 100%;
                max-width: 100%;
                margin: 0;
                padding: 10px;
            }
            
            .chat-history {
                height: auto;
                overflow: visible;
            }
            
            .input-container {
                display: none;
            }
            
            .theme-switch {
                display: none;
            }
        }
    </style>
</head>
<body class="p-4">
    <button class="theme-switch bg-gray-200 dark:bg-gray-700 p-2 rounded-full">
        <i class="fas fa-moon text-gray-700 dark:text-yellow-300"></i>
    </button>
    
    <div class="chat-container p-4">
        <div class="header flex items-center justify-center p-4 border-b border-gray-200">
            <svg class="header-image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#4299e1">
                <path d="M21.928 11.607c-.202-.488-.635-.605-.928-.633V8c0-1.103-.897-2-2-2h-6V4.61c.305-.274.5-.668.5-1.11a1.5 1.5 0 0 0-3 0c0 .442.195.836.5 1.11V6H5c-1.103 0-2 .897-2 2v2.997l-.082.006A1 1 0 0 0 1.99 12v2a1 1 0 0 0 1 1H3v5c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5a1 1 0 0 0 1-1v-1.938a1.006 1.006 0 0 0-.072-.455zM5 20V8h14l.001 3.996L19 12v2h.001l.001 6H5z"></path>
                <ellipse cx="8.5" cy="12" rx="1.5" ry="2"></ellipse>
                <ellipse cx="15.5" cy="12" rx="1.5" ry="2"></ellipse>
                <path d="M12 16c-2.028 0-3.028 1-3.028 1h6.056s-1-1-3.028-1z"></path>
            </svg>
            <h1 class="text-2xl font-bold text-center">رابط هوش مصنوعی Gemini</h1>
        </div>
        
        <div class="chat-history mt-4" id="chatHistory">
            <div class="ai-message message">
                <p>سلام! من دستیار هوش مصنوعی Gemini هستم. چطور می‌توانم به شما کمک کنم؟</p>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
        </div>
        
        <div class="input-container mt-4 flex items-center">
            <textarea 
                id="messageInput" 
                class="message-input w-full border border-gray-300 focus:outline-none"
                placeholder="پیام خود را بنویسید..."
                rows="2"
            ></textarea>
            <button 
                id="sendButton" 
                class="send-button bg-blue-500 text-white ml-3 hover:bg-blue-600 focus:outline-none"
            >
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script>
        const API_KEY = "AIzaSyDgyYPPJgA1VFf4YhFuYubHRCXmYK_rtfk";
        const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent";
        
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatHistory = document.getElementById('chatHistory');
        const typingIndicator = document.getElementById('typingIndicator');
        const themeSwitch = document.querySelector('.theme-switch');
        
        // Conversation history to send with each request
        let conversationHistory = [];
        
        // Theme toggle
        themeSwitch.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            const icon = themeSwitch.querySelector('i');
            if (document.body.classList.contains('dark-mode')) {
                icon.classList.remove('fa-moon');
                icon.classList.add('fa-sun');
            } else {
                icon.classList.remove('fa-sun');
                icon.classList.add('fa-moon');
            }
        });
        
        // Enter key to send message
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Send button click
        sendButton.addEventListener('click', sendMessage);
        
        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Add user message to chat
            addMessageToChat(message, 'user');
            
            // Update conversation history
            conversationHistory.push({
                role: "user",
                parts: [{ text: message }]
            });
            
            // Clear input
            messageInput.value = '';
            
            // Show typing indicator
            typingIndicator.style.display = 'block';
            
            // Send to API
            callGeminiAPI(message);
        }
        
        function addMessageToChat(message, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            
            if (sender === 'user') {
                messageDiv.classList.add('user-message');
                messageDiv.innerHTML = `<p>${formatMessage(message)}</p>`;
            } else {
                messageDiv.classList.add('ai-message');
                messageDiv.innerHTML = `<p>${formatMessage(message)}</p>`;
            }
            
            chatHistory.appendChild(messageDiv);
            scrollToBottom();
        }
        
        function formatMessage(text) {
            // Replace code blocks with formatted code
            let formattedText = text.replace(/```(.+?)```/gs, function(match, codeContent) {
                // Check if the code block has a language specified
                const languageMatch = codeContent.match(/^([a-zA-Z0-9]+)\n/);
                let code = codeContent;
                
                if (languageMatch) {
                    code = codeContent.substring(languageMatch[0].length);
                }
                
                return `<code><pre>${code}</pre></code>`;
            });
            
            // Replace line breaks with <br>
            formattedText = formattedText.replace(/\n/g, '<br>');
            
            return formattedText;
        }
        
        function scrollToBottom() {
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }
        
        async function callGeminiAPI(message) {
            try {
                const requestBody = {
                    contents: [
                        {
                            role: "user",
                            parts: [{ text: message }]
                        }
                    ]
                };
                
                // Add conversation history if available
                if (conversationHistory.length > 1) {
                    requestBody.contents = conversationHistory;
                }
                
                const response = await fetch(`${API_URL}?key=${API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });
                
                const data = await response.json();
                
                // Hide typing indicator
                typingIndicator.style.display = 'none';
                
                if (data.candidates && data.candidates.length > 0) {
                    const aiResponse = data.candidates[0].content.parts[0].text;
                    
                    // Add AI response to chat
                    addMessageToChat(aiResponse, 'ai');
                    
                    // Update conversation history
                    conversationHistory.push({
                        role: "model",
                        parts: [{ text: aiResponse }]
                    });
                    
                    // Limit history to last 10 messages to avoid token limits
                    if (conversationHistory.length > 10) {
                        conversationHistory = conversationHistory.slice(conversationHistory.length - 10);
                    }
                } else {
                    // Handle error or empty response
                    addMessageToChat("متأسفم، مشکلی در دریافت پاسخ وجود داشت. لطفاً دوباره تلاش کنید.", 'ai');
                    console.error("API error or empty response:", data);
                }
            } catch (error) {
                // Hide typing indicator
                typingIndicator.style.display = 'none';
                
                // Show error message
                addMessageToChat("متأسفم، خطایی رخ داد. لطفاً اتصال خود را بررسی کرده و دوباره تلاش کنید.", 'ai');
                console.error("Error calling Gemini API:", error);
            }
        }
    </script>
</body>
</html>
